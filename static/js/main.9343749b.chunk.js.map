{"version":3,"sources":["Game.js","App.js","index.js"],"names":["Game","state","cells","Array","fill","template","concat","Object","toConsumableArray","cellIndex1","cellIndex2","getRandomTempIndex","_this","Math","floor","random","length","getRandomCellIndex","startGame","tempIndex1","tempIndex2","first","second","console","log","newCells","setState","changeIndexOnUp","cellIndex","handleKeyEvent","key","event","this","react_default","a","createElement","Fragment","className","onClick","react_keyboard_event_handler_default","handleKeys","onKeyEvent","map","cell","color","randomId","Component","App","src_Game","ReactDOM","render","src_App","document","getElementById"],"mappings":"2SA8HeA,6MAxHbC,MAAQ,CACNC,MAAOC,MAAM,IAAIC,KAAK,MACtBC,SAAQ,GAAAC,OAAAC,OAAAC,EAAA,EAAAD,CAAMJ,MAAM,GAAGC,KAAK,IAApBG,OAAAC,EAAA,EAAAD,CAA2BJ,MAAM,IAAIC,KAAK,KAClDK,WAAY,KACZC,WAAY,QAGdC,mBAAqB,WAAM,IACjBN,EAAaO,EAAKX,MAAlBI,SACR,OAAOQ,KAAKC,MAAMD,KAAKE,SAAWV,EAASW,WAG7CC,mBAAqB,WAAM,IACjBf,EAAUU,EAAKX,MAAfC,MACR,OAAOW,KAAKC,MAAMD,KAAKE,SAAWb,EAAMc,WAG1CE,UAAY,WAYV,IAZgB,IAGRb,EAAaO,EAAKX,MAAlBI,SACFc,EAAaP,EAAKD,qBAClBS,EAAaR,EAAKD,qBAClBU,EAAQhB,EAASc,GACjBG,EAASjB,EAASe,GAGlBX,EAAaG,EAAKK,qBACpBP,EAAaE,EAAKK,qBACfP,IAAeD,GACpBC,EAAaE,EAAKK,qBAEpBM,QAAQC,IAAIf,EAAYC,GAGxB,IAAMe,EAAWtB,MAAM,IAAIC,KAAK,MAChCqB,EAAShB,GAAcY,EACvBI,EAASf,GAAcY,EAEvBV,EAAKc,SAAS,CACZxB,MAAOuB,EACPhB,aACAC,kBAIJiB,gBAAkB,SAACC,GAYjB,OAVIA,GAAY,GAAKA,EAAY,IAC/BA,GAAwB,GAEtBA,GAAa,GAAKA,EAAY,KAChCA,GAAwB,GAEtBA,GAAa,IAAMA,GAAa,KAClCA,GAAwB,IAGnBA,KAGTC,eAAiB,SAACC,EAAKC,GAIrB,OAHAR,QAAQC,IAAIM,GAGLA,GACL,IAAK,KACLP,QAAQC,IAAIZ,EAAKX,OACHM,OAAAC,EAAA,EAAAD,CAAOK,EAAKX,MAAMC,OAAhC,IACMO,EAAaG,EAAKe,gBAAgBf,EAAKX,MAAMQ,YAC7CC,EAAaE,EAAKe,gBAAgBf,EAAKX,MAAMS,YACnDa,QAAQC,IAAIf,EAAYC,6EASnB,IACCR,EAAU8B,KAAK/B,MAAfC,MAER,OACE+B,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACAH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBAAiBC,QAASN,KAAKd,WAA9C,YAEAe,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBAEbJ,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CACEM,WAAY,CAAC,KAAM,QAAS,OAAQ,QACpCC,WAAYT,KAAKH,iBAGjB3B,EAAMwC,IAAI,SAAAC,GAEV,IAAMC,EAAkB,IAATD,EAAa,MAClB,IAATA,EAAc,OACL,IAATA,EAAc,QACL,KAATA,EAAe,UACN,KAATA,EAAe,aAAe,GAE/B,OACEV,EAAAC,EAAAC,cAAA,OACEE,UAAS,cAAA/B,OAAgBsC,GACzBd,IAAKe,IAAS,KACdF,cA5GKG,aCQJC,MARf,WACE,OACEd,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACa,EAAD,QCFNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.9343749b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport randomId from 'randomid';\r\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\r\n\r\nclass Game extends Component {\r\n\r\n  state = {\r\n    cells: Array(16).fill(null),\r\n    template: [...Array(2).fill(4), ...Array(14).fill(2)],\r\n    cellIndex1: null,\r\n    cellIndex2: null,\r\n  };\r\n\r\n  getRandomTempIndex = () => {\r\n    const { template } = this.state;\r\n    return Math.floor(Math.random() * template.length);\r\n  }\r\n\r\n  getRandomCellIndex = () => {\r\n    const { cells } = this.state;\r\n    return Math.floor(Math.random() * cells.length);\r\n  }\r\n\r\n  startGame = () => {\r\n\r\n    //getting first two numbers: 2 or 4\r\n    const { template } = this.state;\r\n    const tempIndex1 = this.getRandomTempIndex();\r\n    const tempIndex2 = this.getRandomTempIndex();\r\n    const first = template[tempIndex1];\r\n    const second = template[tempIndex2];\r\n    // console.log(first, second);\r\n    \r\n    const cellIndex1 = this.getRandomCellIndex();\r\n    let cellIndex2 = this.getRandomCellIndex();\r\n    while (cellIndex2 === cellIndex1) {\r\n      cellIndex2 = this.getRandomCellIndex();\r\n    }\r\n    console.log(cellIndex1, cellIndex2);\r\n\r\n    //update cells and re-render\r\n    const newCells = Array(16).fill(null);\r\n    newCells[cellIndex1] = first;\r\n    newCells[cellIndex2] = second;\r\n    \r\n    this.setState({\r\n      cells: newCells,\r\n      cellIndex1,\r\n      cellIndex2\r\n    });\r\n  }\r\n\r\n  changeIndexOnUp = (cellIndex) => {\r\n    \r\n    if (cellIndex >=4 && cellIndex < 8) {\r\n      cellIndex = cellIndex - 4;\r\n    }\r\n    if (cellIndex >= 8 && cellIndex < 12) {\r\n      cellIndex = cellIndex - 8;\r\n    }\r\n    if (cellIndex >= 12 && cellIndex <= 15) {\r\n      cellIndex = cellIndex - 12;\r\n    }\r\n\r\n    return cellIndex;\r\n  }\r\n\r\n  handleKeyEvent = (key, event) => {\r\n    console.log(key);\r\n    // console.log(this.state);\r\n\r\n    switch(key) {\r\n      case 'up': \r\n      console.log(this.state);\r\n      const newCells = [...this.state.cells];\r\n      const cellIndex1 = this.changeIndexOnUp(this.state.cellIndex1);\r\n      const cellIndex2 = this.changeIndexOnUp(this.state.cellIndex2);\r\n      console.log(cellIndex1, cellIndex2);\r\n      // newCells[cellIndex1]\r\n      \r\n      \r\n\r\n      // this.setState({});\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { cells } = this.state;\r\n\r\n    return (\r\n      <>\r\n      <div className=\"restart-button\" onClick={this.startGame}>New game</div>\r\n\r\n      <div className=\"game__container\">\r\n\r\n        <KeyboardEventHandler\r\n          handleKeys={[\"up\", \"right\", \"down\", \"left\"]}\r\n          onKeyEvent={this.handleKeyEvent}\r\n         />\r\n\r\n        { cells.map(cell => {\r\n\r\n          const color = (cell === 2)? 'two' : \r\n          (cell === 4) ? 'four' : \r\n          (cell === 8) ? 'eight' : \r\n          (cell === 16) ? 'sixteen' : \r\n          (cell === 32) ? 'thirty-two' : \"\";\r\n\r\n          return (\r\n            <div \r\n              className={`game__cell ${color}`} \r\n              key={randomId(12)}\r\n            >{cell}</div>\r\n          )\r\n        }) }\r\n\r\n        \r\n        \r\n\r\n      </div>\r\n\r\n      </>\r\n    )\r\n  }\r\n};\r\n\r\nexport default Game;\r\n","import React from 'react';\nimport './App.css';\nimport Game from './Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}